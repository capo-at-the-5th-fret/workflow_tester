name: Ccache

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # push:
  # pull_request:
  #   branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    env:
      build_dir: build

    strategy:
        fail-fast: false
        matrix:
          os: [ ubuntu-latest, macos-latest, windows-latest ]
          build_type: [ Release ]
          include:
          - ccache_variant: ccache
          - os: windows-latest
            ccache_variant: sccache
            sccache-path: /home/runner/.cache/sccache
            cxx_compiler: C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.34.31933/bin/HostX64/x64/cl.exe

    runs-on: ${{ matrix.os }}

    #name: build (${{ matrix.os }} - ${{ matrix.build_type }})

    steps:
    - uses: actions/checkout@v3

    # - name: Setup
    #   if: runner.os == 'Windows'
    #   run: mkdir ./.sccache

    # - name: Ccache
    #   if: runner.os != 'Windows'
    #   uses: hendrikmuhs/ccache-action@v1.2.9
    #   with:
    #     key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.build_type }}  # Eg. "some_build-ubuntu-latest"
    #     variant: ${{ matrix.ccache_variant }}

    - name: Build
      uses: lukka/run-cmake@v3.4
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}' #-D CMAKE_CXX_COMPILER_LAUNCHER=${{ matrix.ccache_variant}}
        buildWithCMake: true
        buildDirectory: '${{ env.build_dir }}'

    - name: Build (${{ runner.os }})
      if: runner.os == 'Windows'
      uses: lukka/run-cmake@v3.4
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        cmakeAppendedArgs: '-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}'
        buildWithCMake: true
        buildDirectory: '${{ env.build_dir }}'

    # - name: Config
    #   if: runner.os != 'Windows'
    #   run: >-
    #     cmake -B ${{ env.build_dir }}
    #     -D CMAKE_BUILD_TYPE=${{ matrix.build_type }}
    #     -D CMAKE_CXX_COMPILER_LAUNCHER=${{ matrix.ccache_variant }}

    # - name: Config (Windows)
    #   if: runner.os == 'Windows'
    #   run: >-
    #     cmake -B ${{ env.build_dir }}
    #     -D CMAKE_CXX_COMPILER="${{ matrix.cxx_compiler }}"
    #     -D CMAKE_BUILD_TYPE=${{ matrix.build_type }}
    #     -D CMAKE_CXX_COMPILER_LAUNCHER=${{ matrix.ccache_variant }}

    # - name: Build
    #   run: cmake --build ${{ env.build_dir }} --config ${{ matrix.build_type }}

    # - name: Clang-Tidy
    #   run: |
    #     cd build
    #     cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
    #     clang-tidy -p .

    # - name: Setup (Windows)
    #   if: runner.os == 'Windows'
    #   run: |
    #     SET 
    #     export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"

    # - name: Setup (non-Windows)
    #   if: runner.os != 'Windows'
    #   run: |
    #     export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"

    #- uses: lukka/get-cmake@latest

    # - name: Set up CMake
    #   uses: cmake/setup-cmake@v1
    #   with:
    #     cmakeListsTxtPath: 'CMakeLists.txt'
    #     buildDir: 'build'
    #     installDir: 'install'
    #     cmakeArgs: '-DCMAKE_BUILD_TYPE=Release'